# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: scheduler.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import Empty as _Empty__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class AssignTaskRequest(betterproto.Message):
    cron_task_uuid: str = betterproto.string_field(2)
    start_ms_timestamp: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class GetTaskListResponse(betterproto.Message):
    cron_tasks_uuid: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RemoveTaskRequest(betterproto.Message):
    cron_task_uuid: str = betterproto.string_field(1)
    start_ms_timestamp: int = betterproto.uint64_field(2)


class SchedulerStub(betterproto.ServiceStub):
    async def assign_task(
        self,
        assign_task_request: "AssignTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_Empty__":
        return await self._unary_unary(
            "/scheduler.Scheduler/AssignTask",
            assign_task_request,
            _Empty__,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_task_list(
        self,
        empty: "_Empty__",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTaskListResponse":
        return await self._unary_unary(
            "/scheduler.Scheduler/GetTaskList",
            empty,
            GetTaskListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_task(
        self,
        remove_task_request: "RemoveTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_Empty__":
        return await self._unary_unary(
            "/scheduler.Scheduler/RemoveTask",
            remove_task_request,
            _Empty__,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SchedulerBase(ServiceBase):
    async def assign_task(self, assign_task_request: "AssignTaskRequest") -> "_Empty__":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_task_list(self, empty: "_Empty__") -> "GetTaskListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_task(self, remove_task_request: "RemoveTaskRequest") -> "_Empty__":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_assign_task(
        self, stream: "grpclib.server.Stream[AssignTaskRequest, _Empty__]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.assign_task(request)
        await stream.send_message(response)

    async def __rpc_get_task_list(
        self, stream: "grpclib.server.Stream[_Empty__, GetTaskListResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_task_list(request)
        await stream.send_message(response)

    async def __rpc_remove_task(
        self, stream: "grpclib.server.Stream[RemoveTaskRequest, _Empty__]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_task(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/scheduler.Scheduler/AssignTask": grpclib.const.Handler(
                self.__rpc_assign_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                AssignTaskRequest,
                _Empty__,
            ),
            "/scheduler.Scheduler/GetTaskList": grpclib.const.Handler(
                self.__rpc_get_task_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                _Empty__,
                GetTaskListResponse,
            ),
            "/scheduler.Scheduler/RemoveTask": grpclib.const.Handler(
                self.__rpc_remove_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveTaskRequest,
                _Empty__,
            ),
        }

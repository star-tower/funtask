# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: manager.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import (
    Args as _Args__,
    Empty as _Empty__,
    StatusReport as _StatusReport__,
    Task as _Task__,
    Worker as _Worker__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class IncreaseWorkersRequest(betterproto.Message):
    number: int = betterproto.uint32_field(1)
    other_args: "_Args__" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class IncreaseWorkerRequest(betterproto.Message):
    args: "_Args__" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class IncreaseWorkerResponse(betterproto.Message):
    worker: "_Worker__" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class IncreaseWorkersResponse(betterproto.Message):
    workers: List["_Worker__"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DispatchFunTaskRequest(betterproto.Message):
    worker_uuid: str = betterproto.string_field(1)
    serialized_fun_task: bytes = betterproto.bytes_field(2)
    dependencies: List[str] = betterproto.string_field(3)
    change_status: bool = betterproto.bool_field(4)
    timeout: Optional[float] = betterproto.float_field(
        5, optional=True, group="_timeout"
    )
    other_args: "_Args__" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class DispatchFunTaskResponse(betterproto.Message):
    task: "_Task__" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StopTaskRequest(betterproto.Message):
    worker_uuid: str = betterproto.string_field(1)
    task_uuid: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class StopWorkerRequest(betterproto.Message):
    worker_uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class KillWorkerRequest(betterproto.Message):
    worker_uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetQueuedStatusResponse(betterproto.Message):
    status_report: "_StatusReport__" = betterproto.message_field(1)


class TaskWorkerManagerStub(betterproto.ServiceStub):
    async def increase_workers(
        self,
        increase_workers_request: "IncreaseWorkersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IncreaseWorkersResponse":
        return await self._unary_unary(
            "/manager.TaskWorkerManager/IncreaseWorkers",
            increase_workers_request,
            IncreaseWorkersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def increase_worker(
        self,
        increase_worker_request: "IncreaseWorkerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IncreaseWorkerResponse":
        return await self._unary_unary(
            "/manager.TaskWorkerManager/IncreaseWorker",
            increase_worker_request,
            IncreaseWorkerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def dispatch_fun_task(
        self,
        dispatch_fun_task_request: "DispatchFunTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DispatchFunTaskResponse":
        return await self._unary_unary(
            "/manager.TaskWorkerManager/DispatchFunTask",
            dispatch_fun_task_request,
            DispatchFunTaskResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_task(
        self,
        stop_task_request: "StopTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_Empty__":
        return await self._unary_unary(
            "/manager.TaskWorkerManager/StopTask",
            stop_task_request,
            _Empty__,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_worker(
        self,
        stop_worker_request: "StopWorkerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_Empty__":
        return await self._unary_unary(
            "/manager.TaskWorkerManager/StopWorker",
            stop_worker_request,
            _Empty__,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def kill_worker(
        self,
        kill_worker_request: "KillWorkerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_Empty__":
        return await self._unary_unary(
            "/manager.TaskWorkerManager/KillWorker",
            kill_worker_request,
            _Empty__,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_queued_status(
        self,
        empty: "_Empty__",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetQueuedStatusResponse"]:
        async for response in self._unary_stream(
            "/manager.TaskWorkerManager/GetQueuedStatus",
            empty,
            GetQueuedStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class TaskWorkerManagerBase(ServiceBase):
    async def increase_workers(
        self, increase_workers_request: "IncreaseWorkersRequest"
    ) -> "IncreaseWorkersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def increase_worker(
        self, increase_worker_request: "IncreaseWorkerRequest"
    ) -> "IncreaseWorkerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def dispatch_fun_task(
        self, dispatch_fun_task_request: "DispatchFunTaskRequest"
    ) -> "DispatchFunTaskResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_task(self, stop_task_request: "StopTaskRequest") -> "_Empty__":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_worker(self, stop_worker_request: "StopWorkerRequest") -> "_Empty__":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def kill_worker(self, kill_worker_request: "KillWorkerRequest") -> "_Empty__":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_queued_status(
        self, empty: "_Empty__"
    ) -> AsyncIterator["GetQueuedStatusResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_increase_workers(
        self,
        stream: "grpclib.server.Stream[IncreaseWorkersRequest, IncreaseWorkersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.increase_workers(request)
        await stream.send_message(response)

    async def __rpc_increase_worker(
        self,
        stream: "grpclib.server.Stream[IncreaseWorkerRequest, IncreaseWorkerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.increase_worker(request)
        await stream.send_message(response)

    async def __rpc_dispatch_fun_task(
        self,
        stream: "grpclib.server.Stream[DispatchFunTaskRequest, DispatchFunTaskResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.dispatch_fun_task(request)
        await stream.send_message(response)

    async def __rpc_stop_task(
        self, stream: "grpclib.server.Stream[StopTaskRequest, _Empty__]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_task(request)
        await stream.send_message(response)

    async def __rpc_stop_worker(
        self, stream: "grpclib.server.Stream[StopWorkerRequest, _Empty__]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_worker(request)
        await stream.send_message(response)

    async def __rpc_kill_worker(
        self, stream: "grpclib.server.Stream[KillWorkerRequest, _Empty__]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.kill_worker(request)
        await stream.send_message(response)

    async def __rpc_get_queued_status(
        self, stream: "grpclib.server.Stream[_Empty__, GetQueuedStatusResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_queued_status,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/manager.TaskWorkerManager/IncreaseWorkers": grpclib.const.Handler(
                self.__rpc_increase_workers,
                grpclib.const.Cardinality.UNARY_UNARY,
                IncreaseWorkersRequest,
                IncreaseWorkersResponse,
            ),
            "/manager.TaskWorkerManager/IncreaseWorker": grpclib.const.Handler(
                self.__rpc_increase_worker,
                grpclib.const.Cardinality.UNARY_UNARY,
                IncreaseWorkerRequest,
                IncreaseWorkerResponse,
            ),
            "/manager.TaskWorkerManager/DispatchFunTask": grpclib.const.Handler(
                self.__rpc_dispatch_fun_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                DispatchFunTaskRequest,
                DispatchFunTaskResponse,
            ),
            "/manager.TaskWorkerManager/StopTask": grpclib.const.Handler(
                self.__rpc_stop_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                StopTaskRequest,
                _Empty__,
            ),
            "/manager.TaskWorkerManager/StopWorker": grpclib.const.Handler(
                self.__rpc_stop_worker,
                grpclib.const.Cardinality.UNARY_UNARY,
                StopWorkerRequest,
                _Empty__,
            ),
            "/manager.TaskWorkerManager/KillWorker": grpclib.const.Handler(
                self.__rpc_kill_worker,
                grpclib.const.Cardinality.UNARY_UNARY,
                KillWorkerRequest,
                _Empty__,
            ),
            "/manager.TaskWorkerManager/GetQueuedStatus": grpclib.const.Handler(
                self.__rpc_get_queued_status,
                grpclib.const.Cardinality.UNARY_STREAM,
                _Empty__,
                GetQueuedStatusResponse,
            ),
        }
